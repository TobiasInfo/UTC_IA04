@startuml
title Drone Surveillance Simulation

class Simulation {
    - drones : List<SurveillanceDrone>
    - crowd : List<CrowdMember>
    - performanceMetrics : PerformanceMetrics Classe pas encore implémentée
    - systemParams : SystemParameters Classe pas encore implémentée  
    + startSimulation() : void
    + collectData() : void
}

class Centrale {
    - Carte : Map{Position : (Statut,idDrone}} Avec Statut = (nb personnes, nb Malaise), -1 si pas de drone
    + SendInfotoDrone() Envoie la liste des Statuts autour du Drone idDrone

}

class SurveillanceDrone {
    - id : int
    - position : Position (en INT)
    - battery : float
    - Vecteur de précision de la détection de malaise : fonction(x int) []int
    - ZonessignaléesparlaCentrale : []positions
    + move(destination : Position) : void
    + detectIncident(x int) Map{(1,1):[INT le nombre de malaise, Int le nombre de personnes dans la case], etc} 
    + communicate(protocol : CommunicationProtocol) : void
}

class Bonhomme{
    - id : int
    - position : Position
    - Malaise: Bool
    - malaiseProbability : float
    - durée de vie : int CONST
    + move() : void
    + updateHealth() : void
    + CompteVoisins()
    + EnMalaise() s'incrémente mpour compter la durée de malaise, si on arrive à la variable "durée de vie" on dit qu'il est mort
//Update health compte le nombre de voisins et est proportinelle, et la multiplie par la proba de malaise, et mets malaise à True si un seuil est dépassé
}

class Environment { 
    + updateEnvironment() : void
}

class Position {
    - x : float
    - y : float
    + calculateDistance(other : Position) : float
}


class Obstacle {
    - position : Position
}

Simulation *-- Environment 
Environment *-- Obstacle 
Environment *-- Bonhomme
Environment *-- SurveillanceDrone 

Environment <|-- Centrale 
Centrale <|--|> SurveillanceDrone : "Sont connectés par des chanels"

@enduml